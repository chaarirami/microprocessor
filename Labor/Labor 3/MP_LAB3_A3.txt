/*---------------------------------------------------------------------------------------
 * Felix Rehaag und Rami Chaari
 * 	             LED Helligkeit mittels XY-Joystick verÃ¤ndern
 *---------------------------------------------------------------------------------------
*/

#include "tm4c1294ncpdt.h"
#include "stdio.h"
#define ADC_VREF 3300.0 // voltage on V_REF+ pin in mV
#define V_LSB (ADC_VREF / 4095) // V_LSB voltage in mV
#define V_COEFF ((4.70 + 9.137) / 9.137 * V_LSB)
#define WAIT 200000

void busy (unsigned long);

int main(void)
{	unsigned int ADCoutput, wt;
	// Port  Clock Gating Control
	SYSCTL_RCGCGPIO_R |= 0x800;               					// clock Port M enablen
	SYSCTL_RCGCGPIO_R |= 0x010;									// clock Port E enablen
	SYSCTL_RCGCGPIO_R |= 0x008;
	SYSCTL_RCGCADC_R |= 0x1; wt++;								// Clock ADC0 enable set
	while((SYSCTL_PRGPIO_R & 0x800)==0); 						//Auf Port M warten
	while((SYSCTL_PRGPIO_R & 0x010)==0); 						//Auf Port E warten
	while((SYSCTL_PRGPIO_R & 0x008)==0);
    //Aktivierung Pins

	// Magic code for start the ADC Clocking
	// => see tm4c1294ncpdt Datasheet, 15.3.2.7 ADC Module Clocking
	SYSCTL_PLLFREQ0_R |= SYSCTL_PLLFREQ0_PLLPWR; // power on the PLL
	while(!(SYSCTL_PLLSTAT_R & SYSCTL_PLLSTAT_LOCK)); // wait till PLL has locked
	ADC0_CC_R = 0x01 ; wt++; // select PIOSC (internal RCOsc) as ADC analog clock
	SYSCTL_PLLFREQ0_R &= ~SYSCTL_PLLFREQ0_PLLPWR; // power off the PLL (s. above)
	// end of magic code ...

    GPIO_PORTM_DEN_R |= 0x02;
    GPIO_PORTD_AHB_DEN_R = 0x01;

    GPIO_PORTM_DIR_R |= 0x01; // Richtungen der Ports
    GPIO_PORTD_AHB_AFSEL_R |= (1 << 0);
    GPIO_PORTD_AHB_PCTL_R = 0x03;




    // Prepare Port Pin PE0 as AIN3
    GPIO_PORTE_AHB_AFSEL_R |=0x01; // PE0 Alternative Pin Function enable
    GPIO_PORTE_AHB_AMSEL_R |=0x01; // PE0 Analog Pin Function enable
    GPIO_PORTE_AHB_DEN_R &=~0x01; // PE0 Digital Pin Function DISABLE
    GPIO_PORTE_AHB_DIR_R &=~0x01; // Allow Input PE0
    ADC0_ACTSS_R &= ~0x0F; // disable all 4 sequencers of ADC 0
    ADC0_SSMUX0_R =0x00000003; // Sequencer 0 channel AIN3 only no mux
    ADC0_SSCTL0_R |=0x00000002; // Set "END=0" sequence length 1 (one sample sequence)
    ADC0_CTL_R =0x0; // V_REF = Vdda 3.3V ... if Bit0 is clear
    ADC0_ACTSS_R |= 0x01; // enable sequencer 0 of ADC 0

    // configure Timer 0
    SYSCTL_RCGCTIMER_R |= (1<<0); // timer 0
    while(!(SYSCTL_PRTIMER_R & (1<<0))); // wait for timer 0 activation
    TIMER0_CTL_R &= ~0x0001; // disable Timer 0
    TIMER0_CFG_R = 0x04; // 2 x 16-bit mode
    // compare mode, down, pwm: TAAMS=1, periodic: TAMR=0x2
    TIMER0_TAMR_R = 0x000A;
    TIMER0_CTL_R |= (1<<6); // TAPWML=1 (inverting)
    TIMER0_TAILR_R = 16000-1; // f = 1 kHz
    TIMER0_TAMATCHR_R = 4000-1; // MATCH = 0.5 ms
    GPIO_PORTD_AHB_DATA_R |=(1<<1); // set PD(0) - Startsignal
    //start on 2nd channel
    TIMER0_CTL_R |= 0x0001; // enable Timer 0A

    while(1)
    {
    ADC0_PSSI_R|=0x01; // Start ADC0
    while(ADC0_SSFSTAT0_R & 0x000000100); // wait for FIFO (inverted) Flag "EMPTY = False"
    ADCoutput = (unsigned long) ADC0_SSFIFO0_R; // Take avalue from FIFO output
    double joyVolt = ADCoutput * V_COEFF + 0.5;
    // Calculate Output in mV with respect to voltage divider 5:3 in the Lab
    printf("0x%3x=%4d (dec) ==> %04d [mV] \n", ADCoutput, ADCoutput, (int) (joyVolt));

    int joystickSwitch = (GPIO_PORTM_DATA_R && 0x02); //switch value
    printf("%i\n", TIMER0_TAMATCHR_R);

    double speicher = TIMER0_TAMATCHR_R;

    if(!joystickSwitch){
		if((joyVolt > 3050)){
			ADCoutput = (unsigned long) ADC0_SSFIFO0_R; // Take avalue from FIFO output
			joyVolt = ADCoutput * V_COEFF + 0.5;

			while(TIMER0_TAMATCHR_R < (14000-1)*0.95){
				TIMER0_TAMATCHR_R++;
			}
		}

		else if((joyVolt < 50)){
			ADCoutput = (unsigned long) ADC0_SSFIFO0_R; // Take avalue from FIFO output
			joyVolt = ADCoutput * V_COEFF + 0.5;

			while(TIMER0_TAMATCHR_R > (14000-1)*0.05){
				TIMER0_TAMATCHR_R--;
			}
		}
    }
    else{
    		speicher = TIMER0_TAMATCHR_R;
    		TIMER0_TAMATCHR_R = (16000-1) * 0.78375;
    		busy (WAIT);
    		TIMER0_TAMATCHR_R = 0;
    		busy (WAIT);
    		TIMER0_TAMATCHR_R = speicher;
    }
   }
}

void busy (unsigned long zeit){
	unsigned long i;
	for(i=0;i<zeit;i++);
}
